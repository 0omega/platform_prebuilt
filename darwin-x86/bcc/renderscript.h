#ifndef __RENDER_LIB_HDR__
#define __RENDER_LIB_HDR__

struct vec2_s {float x; float y;};
struct vec3_s {float x; float y; float z;};
struct vec4_s {float x; float y; float z; float w;};

int    loadI32(int, int);
float  loadF(int, int);
float* loadArrayF(int, int);
int*   loadArrayI32(int, int);
void   loadVec4(int, int, float *);
void   loadMatrix(int, int, float *);
void   storeI32(int, int, int);
void   storeF(int, int, float);
void   storeVec4(int, int, float *);
void   storeMatrix(int, int, float *);
float* loadSimpleMeshVerticesF(int, int);
void   updateSimpleMesh(int);
float  modf(float, float);
int    abs(int);
float  absf(float);
float  sinf_fast(float);
float  cosf_fast(float);
float  sinf(float);
float  cosf(float);
float  asinf(float);
float  acosf(float);
float  atanf(float);
float  atan2f(float, float);
float  fabsf(float);
float  randf(float);
float  randf2(float, float);
float  floorf(float);
float  fracf(float);
float  ceilf(float);
float  roundf(float);
float  expf(float);
float  logf(float);
float  powf(float, float);
float  maxf(float, float);
float  minf(float, float);
int    sqrt(int);
float  sqrtf(float);
int    sqr(int);
float  sqrf(float);
int    sign(int);
float  signf(float);
int    clamp(int, int, int);
float  clampf(float, float, float);
float  distf2(float, float, float, float);
float  distf3(float, float, float, float, float, float);
float  magf2(float, float);
float  magf3(float, float, float);
float  radf(float);
float  degf(float);
float  lerpf(float, float, float);
float  normf(float, float, float);
float  mapf(float, float, float, float, float);
float  noisef(float);
float  noisef2(float, float);
float  noisef3(float, float, float);
float  turbulencef2(float, float, float);
float  turbulencef3(float, float, float, float);
int    second();
int    minute();
int    hour();
int    day();
int    month();
int    year();
int    uptimeMillis();
int    startTimeMillis();
int    elapsedTimeMillis();
void   matrixLoadIdentity(float *mat);
void   matrixLoadFloat(float *mat, float *f);
void   matrixLoadMat(float *mat, float *newmat);
void   matrixLoadRotate(float *mat, float rot, float x, float y, float z);
void   matrixLoadScale(float *mat, float x, float y, float z);
void   matrixLoadTranslate(float *mat, float x, float y, float z);
void   matrixLoadMultiply(float *mat, float *lhs, float *rhs);
void   matrixMultiply(float *mat, float *rhs);
void   matrixRotate(float *mat, float rot, float x, float y, float z);
void   matrixScale(float *mat, float x, float y, float z);
void   matrixTranslate(float *mat, float x, float y, float z);
void   vec2Rand(float *vec, float maxLen);
void   vec3Norm(struct vec3_s *);
float  vec3Length(struct vec3_s *);
void   vec3Add(struct vec3_s *dest, struct vec3_s *lhs, struct vec3_s *rhs);
void   vec3Sub(struct vec3_s *dest, struct vec3_s *lhs, struct vec3_s *rhs);
void   vec3Cross(struct vec3_s *dest, struct vec3_s *lhs, struct vec3_s *rhs);
float  vec3Dot(struct vec3_s *lhs, struct vec3_s *rhs);
void   vec3Scale(struct vec3_s *lhs, float scale);
void   vec4Norm(struct vec4_s *);
float  vec4Length(struct vec4_s *);
void   vec4Add(struct vec4_s *dest, struct vec4_s *lhs, struct vec4_s *rhs);
void   vec4Sub(struct vec4_s *dest, struct vec4_s *lhs, struct vec4_s *rhs);
float  vec4Dot(struct vec4_s *lhs, struct vec4_s *rhs);
void   vec4Scale(struct vec4_s *lhs, float scale);
void   bindProgramFragment(int);
void   bindProgramFragmentStore(int);
void   bindProgramStore(int);
void   bindProgramVertex(int);
void   bindSampler(int, int, int);
void   bindTexture(int, int, int);
void   vpLoadModelMatrix(void *);
void   vpLoadTextureMatrix(void *);
void   drawRect(float x1, float y1, float x2, float y2, float z);
void   drawQuad(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, float x4, float y4, float z4);
void   drawQuadTexCoords(float x1, float y1, float z1, float u1, float v1, float x2, float y2, float z2, float u2, float v2, float x3, float y3, float z3, float u3, float v3, float x4, float y4, float z4, float u4, float v4);
void   drawSprite(float x, float y, float z, float w, float h);
void   drawSpriteScreenspace(float x, float y, float z, float w, float h);
void   drawLine(float x1, float y1, float z1, float x2, float y2, float z2);
void   drawPoint(float x1, float y1, float z1);
void   drawSimpleMesh(int ism);
void   drawSimpleMeshRange(int ism, int start, int len);
void   pfClearColor(float, float, float, float);
void   color(float, float, float, float);
void   hsb(float, float, float, float);
void   hsbToRgb(float, float, float, float*);
int    hsbToAbgr(float, float, float, float);
void   ambient(float, float, float, float);
void   diffuse(float, float, float, float);
void   specular(float, float, float, float);
void   emission(float, float, float, float);
void   shininess(float);
void   pointAttenuation(float, float, float);
void   uploadToTexture(int, int);
void   uploadToBufferObject(int);
int    colorFloatRGBAtoUNorm8(float, float, float, float);
int    colorFloatRGBto565(float, float, float);
int    getWidth();
int    getHeight();
int    sendToClient(void *data, int cmdID, int len, int waitForSpace);
void   debugF(void *, float);
void   debugI32(void *, int);
void   debugHexF(void *, float);
void   debugHexI32(void *, int);
void   scriptCall(int);
#endif /*__RENDER_LIB_H__*/
